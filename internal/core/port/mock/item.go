// Code generated by MockGen. DO NOT EDIT.
// Source: item.go
//
// Generated by this command:
//
//	mockgen -source=item.go -destination=mock/item.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domain "awesomeProject/internal/core/domain"
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockItemRepository) GetItems(ctx context.Context, page, pageSize int) ([]*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", ctx, page, pageSize)
	ret0, _ := ret[0].([]*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockItemRepositoryMockRecorder) GetItems(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockItemRepository)(nil).GetItems), ctx, page, pageSize)
}

// InsertItem mocks base method.
func (m *MockItemRepository) InsertItem(ctx context.Context, item *domain.Item) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertItem", ctx, item)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertItem indicates an expected call of InsertItem.
func (mr *MockItemRepositoryMockRecorder) InsertItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertItem", reflect.TypeOf((*MockItemRepository)(nil).InsertItem), ctx, item)
}

// MockItemService is a mock of ItemService interface.
type MockItemService struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceMockRecorder
}

// MockItemServiceMockRecorder is the mock recorder for MockItemService.
type MockItemServiceMockRecorder struct {
	mock *MockItemService
}

// NewMockItemService creates a new mock instance.
func NewMockItemService(ctrl *gomock.Controller) *MockItemService {
	mock := &MockItemService{ctrl: ctrl}
	mock.recorder = &MockItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemService) EXPECT() *MockItemServiceMockRecorder {
	return m.recorder
}

// GetItemsPage mocks base method.
func (m *MockItemService) GetItemsPage(ctx context.Context, page, pageSize int) ([]*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsPage", ctx, page, pageSize)
	ret0, _ := ret[0].([]*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsPage indicates an expected call of GetItemsPage.
func (mr *MockItemServiceMockRecorder) GetItemsPage(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsPage", reflect.TypeOf((*MockItemService)(nil).GetItemsPage), ctx, page, pageSize)
}

// Register mocks base method.
func (m *MockItemService) Register(ctx context.Context, file multipart.File) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, file)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockItemServiceMockRecorder) Register(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockItemService)(nil).Register), ctx, file)
}
